# Notes: 
# 1. Use the following username and password to access the admin rights 
# username: admin
# password: password
# 2. Ensure you open the whole folder for this task in VS Code otherwise the 
# program will look in your root directory for the text files.
# Please open methods_tm as well in the same file!
# 3. For the methods used, please refer to methods_tm file in my profile 

# =====importing libraries===========
import os
from methods_tm import *

DATETIME_STRING_FORMAT = "%Y-%m-%d"

# Create tasks.txt if it doesn't exist
if not os.path.exists("tasks.txt"):
    with open("tasks.txt", "w") as default_file:
        pass

with open("tasks.txt", 'r') as task_file:
    task_data = task_file.read().split("\n")
    task_data = [t for t in task_data if t != ""]

task_list = []
for t_str in task_data:
    curr_t = {}

    # Split by semicolon and manually add each component
    task_components = t_str.split(";")
    curr_t['username'] = task_components[0]
    curr_t['title'] = task_components[1]
    curr_t['description'] = task_components[2]
    curr_t['due_date'] = datetime.strptime(task_components[3], DATETIME_STRING_FORMAT)
    curr_t['assigned_date'] = datetime.strptime(task_components[4], DATETIME_STRING_FORMAT)
    curr_t['completed'] = True if task_components[5] == "Yes" else False

    task_list.append(curr_t)

# ====Login Section====
'''This code reads usernames and password from the user.txt file to 
    allow a user to login.
'''
# If no user.txt file, write one with a default account
if not os.path.exists("user.txt"):
    with open("user.txt", "w") as default_file:
        default_file.write("admin;password")

# Read in user_data
with open("user.txt", 'r') as user_file:
    user_data = user_file.read().split("\n")

# Convert to a dictionary
username_password = {}
for user in user_data:
    username, password = user.split(';')
    username_password[username] = password

curr_user = ""
logged_in = False
while not logged_in:

    print("LOGIN")
    curr_user = input("Username: ")
    curr_pass = input("Password: ")
    if curr_user not in username_password.keys():
        print("User does not exist")
        continue
    elif username_password[curr_user] != curr_pass:
        print("Wrong password")
        continue
    else:
        print("Login Successful!")
        logged_in = True

while True:
    # presenting the menu to the user and 
    # making sure that the user input is converted to lower case.
    print()
    menu = input('''Select one of the following Options below:
r - Registering a user
a - Adding a task
va - View all tasks
vm - View my task
gr - generate reports
ds - Display statistics
e - Exit
: ''').lower()

    if menu == 'r':
        reg_user(username_password)

    elif menu == 'a':
        '''Allow a user to add a new task to task.txt file
            Prompt a user for the following: 
             - A username of the person whom the task is assigned to,
             - A title of a task,
             - A description of the task and 
             - the due date of the task.'''
        task_username = input("Name of person assigned to task: ")
        if task_username not in username_password.keys():
            print("User does not exist. Please enter a valid username")
            continue
        task_title = input("Title of Task: ")
        task_description = input("Description of Task: ")
        while True:
            try:
                task_due_date = input("Due date of task (YYYY-MM-DD): ")
                due_date_time = datetime.strptime(task_due_date, DATETIME_STRING_FORMAT)
                break

            except ValueError:
                print("Invalid datetime format. Please use the format specified")

        # Then get the current date with the datetime method.
        curr_date = datetime.today()
        ''' Add the data to the file task.txt and
            Include 'No' to indicate if the task is complete.'''
        new_task = {
            "username": task_username,
            "title": task_title,
            "description": task_description,
            "due_date": due_date_time,
            "assigned_date": curr_date,
            "completed": False
        }
        add_task(task_list, DATETIME_STRING_FORMAT, new_task)

    elif menu == 'va':
        '''Reads the task from task.txt file and prints to the console in the 
           format of Output 2 presented in the task pdf (i.e. includes spacing
           and labelling) 
        '''
        view_all(task_list, DATETIME_STRING_FORMAT)

    elif menu == 'vm':

        view_mine(task_list, curr_user, DATETIME_STRING_FORMAT)

        '''Reads the task from task.txt file and prints to the console in the 
           format of Output 2 presented in the task pdf (i.e. includes spacing
           and labelling)
        '''

    elif menu == 'gr':
        '''Generate report functionality'''

        # I use this code to coount the total amount of users
        total_users = len(username_password)

        # And this for the total amount of tasks
        total_tasks = len(task_list)

        # This is to count the total completed tasks
        completed_tasks = sum(task['completed'] for task in task_list)

        # This is to count the uncompleted tasks
        uncompleted_tasks = total_tasks - completed_tasks

        # Counting the overdue tasks
        today = datetime.now()
        overdue_tasks = sum(1 for task in task_list if not task['completed'] and task['due_date'] < today)
        # Calculating percentage of incomplete tasks
        percentage_incomplete = (uncompleted_tasks / total_tasks) * 100 if total_tasks != 0 else 0

        # Calculating percentage of overdue tasks
        percentage_overdue = (overdue_tasks / total_tasks) * 100 if total_tasks != 0 else 0

        # Here we get input from the user to specify the type of report they want
        report_type = input("Select report type (user overview (uo) / task overview (to)): ").lower()

        if report_type == 'user overview' or report_type == "uo":
            # Here the user overview report are generated
            with (open("user_overview.txt", "w") as report_file):
                report_file.write("User Overview Report\n")
                report_file.write("--------------------\n")
                report_file.write(f"Total number of users registered: {total_users}\n")
                report_file.write(f"Total number of tasks tracked: {total_tasks}\n\n")

                # Here I assign users to tasks and loop through every username, summarizes the tasks assigned
                # to each user and their completion state and gives a breadown and statistics for each user
                for username in username_password:
                    user_tasks = [task for task in task_list if task['username'] == username]
                    total_user_tasks = len(user_tasks)
                    percentage_of_total_tasks = (total_user_tasks / total_tasks) * 100 if total_tasks != 0 else 0
                    completed_user_tasks = sum(1 for task in user_tasks if task['completed'])
                    percentage_completed_tasks = (completed_user_tasks /
                                                  total_user_tasks) * 100 if total_user_tasks != 0 else 0
                    report_file.write(f"User: {username}\n")
                    report_file.write(f"Total number of tasks assigned: {total_user_tasks}\n")
                    report_file.write(f"Percentage of total tasks assigned: {percentage_of_total_tasks:.2f}%\n")
                    report_file.write(f"Percentage of completed tasks: {percentage_completed_tasks:.2f}%\n\n")

            print("\nUser Overview report generated! (check folder)")

        elif report_type == 'task overview' or report_type == "to":
            # Generate task overview report
            print("\nTask Overview report generated! (check folder)")
            # And formatting the report to task_overview.txt as requested
            with open("task_overview.txt", "w") as report_file:
                report_file.write("Task Overview Report\n")
                report_file.write("--------------------\n")
                report_file.write(f"Total number of tasks: {total_tasks}\n")
                report_file.write(f"Total number of completed tasks: {completed_tasks}\n")
                report_file.write(f"Total number of uncompleted tasks: {uncompleted_tasks}\n")
                report_file.write(f"Total number of overdue tasks: {overdue_tasks}\n")
                report_file.write(f"Percentage of tasks that are incomplete: {percentage_incomplete:.2f}%\n")
                report_file.write(f"Percentage of tasks that are overdue: {percentage_overdue:.2f}%\n")

            print("Task overview report generated and saved to task_overview.txt.")

        else:
            print("\nAn error has occurred. Please choose User Overview (uo) / Task Overview (to).")
            # And this is just a safety precaution

    elif menu == 'ds' and curr_user == 'admin':

        '''Display statistics functionality'''

        # Read user data from user.txt

        with open("user.txt", 'r') as user_file:

            user_data = user_file.read().split("\n")

        # Convert user data to a dictionary

        username_password = {}

        for user in user_data:

            if user:
                username, password = user.split(';')

                username_password[username] = password

        # Here I count the total number of registered users

        total_users = len(username_password)

        # Read task data from tasks.txt

        with open("tasks.txt", 'r') as task_file:

            task_data = task_file.read().split("\n")

        # Convert task data to a list of dictionaries
        task_list = []

        for t_str in task_data:

            if t_str:
                curr_t = {}

                task_components = t_str.split(";")

                curr_t['username'] = task_components[0]

                curr_t['title'] = task_components[1]

                curr_t['description'] = task_components[2]

                curr_t['due_date'] = datetime.strptime(task_components[3],
                                                       DATETIME_STRING_FORMAT).date()  # Convert to date

                curr_t['assigned_date'] = datetime.strptime(task_components[4],
                                                            DATETIME_STRING_FORMAT).date()  # Convert to vm

                curr_t['completed'] = True if task_components[5] == "Yes" else False

                task_list.append(curr_t)

        # Counting total number of tasks

        total_tasks = len(task_list)

        # Counting completed tasks

        completed_tasks = sum(task['completed'] for task in task_list)

        # Counting uncompleted tasks

        uncompleted_tasks = total_tasks - completed_tasks

        # Counting overdue tasks

        today = datetime.now().date()

        overdue_tasks = sum(1 for task in task_list if not task['completed'] and task['due_date'] < today)

        # This is percentage of incomplete tasks

        percentage_incomplete = (uncompleted_tasks / total_tasks) * 100 if total_tasks != 0 else 0

        # Here I calculate the percentage of overdue tasks

        percentage_overdue = (overdue_tasks / total_tasks) * 100 if total_tasks != 0 else 0

        # I tried to make the print-out a little user-friendly and easy to read
        print("-----------------------------------")
        print("Statistics")
        print("-----------------------------------")
        print(f"Total number of users: {total_users}")
        print(f"Total number of tasks: {total_tasks}")
        print(f"Number of completed tasks: {completed_tasks}")
        print(f"Number of uncompleted tasks: {uncompleted_tasks}")
        print(f"Number of overdue tasks: {overdue_tasks}")
        print(f"Percentage of tasks that are incomplete: {percentage_incomplete:.2f}%")
        print(f"Percentage of tasks that are overdue: {percentage_overdue:.2f}%")
        print("-----------------------------------")

        num_users = len(username_password.keys())
        num_tasks = len(task_list)

        print("-----------------------------------")
        print(f"Number of users: \t\t {num_users}")
        print(f"Number of tasks: \t\t {num_tasks}")
        print("-----------------------------------")

    elif menu == 'e':
        print('Goodbye!!!')
        exit()

    else:  # This is another safety precaution
        print("You have made a wrong choice, Please Try again")
